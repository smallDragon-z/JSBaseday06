//创建函数，传递任意一项，返回斐波那契数列中该项的值
/*
function fib(n){
  //第1项和第2项的值都是1
  var n1=1;
  var n2=1;
  //从第3项开始，如果要求哪一项的值，就让n1和n2的值不断往后挪动,挪动结束后,n2的值就是所求项的值
  for(var i=3;i<=n;i++){
    //每次挪动，n1的值是上一次n2的值，n2的值是上一次n1和n2的和
	var c=n1;
	n1=n2;
	n2=c+n2;
  }
  //挪动结束
  return n2;
}
console.log( fib(50) );
*/

//每一项的值都是由前两项相加的和组成
//第n的值，返回前两项相加的和
//fib2(n)   fib2(n-1)  fib2(n-2)
//当n为1或者2的时候，返回1
function fib2(n){
  //当n为1或者2的时候，不能再往下继续递归，直接跳出，并返回1
  if(n===1 || n===2){
    return 1;
  }
  return fib2(n-1)+fib2(n-2);
}
console.log( fib2(50) );
/*
fib2(4)+fib2(3)
fib2(3)+fib2(2)+fib2(2)+fib2(1)
fib2(2)+fib2(1)+1+1+1
1+1+1+1+1
*/
//CPU密集型算法
//单线程：只利用其中一个内核
